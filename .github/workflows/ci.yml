name: "ci"
permissions:
  pull-requests: write
  contents: write
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  lint:
    timeout-minutes: 60
    runs-on: blacksmith-2vcpu-ubuntu-2404
    steps:
      - name: checkout repository
        uses: actions/checkout@v5

      - name: setup
        uses: ./.github/actions/devenv
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: lint clippy
        run: lint:clippy
        shell: devenv shell -c -- bash -e {0}

      - name: lint formatting
        run: lint:format
        shell: devenv shell -c -- bash -e {0}

  # docs:
  #   timeout-minutes: 60
  #   runs-on: ubuntu-latest
  # #   runs-on: blacksmith-2vcpu-ubuntu-2404
  #   env:
  #     RUSTUP_TOOLCHAIN: "nightly"
  #   steps:
  #     - name: checkout repository
  #       uses: actions/checkout@v5

  #     - name: setup
  #       uses: ./.github/actions/devenv
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: build docs
  #       run: build:docs

  test:
    timeout-minutes: 60
    runs-on: blacksmith-2vcpu-ubuntu-2404
    steps:
      - name: checkout repository
        uses: actions/checkout@v5

      - name: setup
        uses: ./.github/actions/devenv
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: increase open file limit
        run: |
          # WARNING: Setting the limit to 'unlimited' is not recommended.
          # It's safer to set a specific high number, e.g., --nofile=1000000:1000000
          sudo prlimit --pid $$ --nofile=1000000:1000000
          echo "ULIMIT: $(ulimit -n)"
        shell: bash

      - name: test `memory_wallet` with `ssr`
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          cargo test_memory_wallet_ssr
        shell: devenv shell -- bash -e {0}

      - name: test `memory_wallet` with `docs`
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          cargo test_memory_wallet_docs
        shell: devenv shell -- bash -e {0}

      - name: test `wasm_client_solana` with `ssr`
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          cargo test_wasm_client_solana_ssr
        shell: devenv shell -- bash -e {0}

      - name: test `wasm_client_solana` with `docs`
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          cargo test_wasm_client_solana_docs
        shell: devenv shell -- bash -e {0}
      - name: test `test_utils_solana` with `ssr` and `test_validator`

        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          cargo test_streams
        shell: devenv shell -- bash -e {0}

      - name: test `example_client`
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          cargo test_example_client
        shell: devenv shell -- bash -e {0}

      - name: test `wasm` with background validator
        continue-on-error: true
        env:
          WASM_BINDGEN_TEST_TIMEOUT: 120
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          install:eget
          test:validator
        shell: devenv shell -- bash -e {0}

  coverage:
    timeout-minutes: 60
    runs-on: blacksmith-2vcpu-ubuntu-2404
    steps:
      - name: checkout repository
        uses: actions/checkout@v5

      - name: setup
        uses: ./.github/actions/devenv
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: coverage `memory_wallet_ssr`
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
            cargo coverage_memory_wallet_ssr
        shell: devenv shell -- bash -e {0}

      # - name: coverage `memory_wallet_docs`
      #   run: cargo +nightly coverage_memory_wallet_docs
      #   shell: devenv shell bash -- -e {0}

      - name: coverage `wasm_client_solana_ssr`
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          cargo coverage_wasm_client_solana_ssr
        shell: devenv shell -- bash -e {0}

      # - name: coverage `wasm_client_solana_docs`
      #   run: cargo +nightly coverage_wasm_client_solana_docs
      #   shell: devenv shell bash -- -e {0}

      - name: coverage `streams`
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          cargo coverage_streams
        shell: devenv shell -- bash -e {0}

      - name: coverage `example_client`
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          cargo coverage_example_client
        shell: devenv shell -- bash -e {0}

      - name: coverage `codecov_report`
        run: |
          sudo prlimit --pid $$ --nofile=1000000:1000000
          cargo coverage_codecov_report
        shell: devenv shell -- bash -e {0}

      - name: upload coverage
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: codecov/codecov-action@v5
        with:
          files: codecov.json
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    timeout-minutes: 60
    runs-on: blacksmith-2vcpu-ubuntu-2404
    steps:
      - name: checkout repository
        uses: actions/checkout@v5

      - name: setup
        uses: ./.github/actions/devenv
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: build
        run: cargo build --locked
        shell: devenv shell -c -- bash -e {0}

      - name: build all features
        run: cargo build --all-features --locked
        shell: devenv shell -c -- bash -e {0}

      - name: build wasm
        run: |
          export RUSTFLAGS='--cfg getrandom_backend="wasm_js"'
          cargo build -p wasm_client_solana --target wasm32-unknown-unknown
        shell: devenv shell -c -- bash -e {0}

  release:
    permissions:
      pull-requests: write
      contents: write
      issues: write
    timeout-minutes: 60
    if: github.event_name == 'push'
    runs-on: blacksmith-2vcpu-ubuntu-2404
    needs: [test, lint, build]
    steps:
      - name: setup rust
        uses: dtolnay/rust-toolchain@stable

      - name: checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: release
        uses: MarcoIeni/release-plz-action@v0.5
        id: release-plz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: tag released prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASES: ${{ steps.release-plz.outputs.releases }}
        run: |
          set -e

          # Iterate over released packages and add a label to the PRs
          # shipped with the release.
          for release in $(echo "$RELEASES" | jq -r -c '.[]'); do
              package_name=$(echo "$release" | jq -r '.package_name')
              version=$(echo "$release" | jq -r '.version')
              prs_length=$(echo "$release" | jq '.prs | length')
              if [ "$prs_length" -gt 0 ]; then
                  # Create label.
                  # Use `--force` to overwrite the label,
                  # so that the command does not fail if the label already exists.
                  label="released:$package_name-$version"
                  echo "Creating label $label"
                  gh label create $label --color BFD4F2 --force
                  for pr in $(echo "$release" | jq -r -c '.prs[]'); do
                      pr_number=$(echo "$pr" | jq -r '.number')
                      echo "Adding label $label to PR #$pr_number"
                      gh pr edit $pr_number --add-label $label
                  done
              else
                  echo "No PRs found for package $package_name"
              fi
          done
        shell: bash
